/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ees.struts.action;

import com.ees.hibernate.ChooseClass;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ees.javabean.DBBean;
import com.ees.struts.action.BaseAction;
import com.sun.org.apache.bcel.internal.generic.IF_ACMPEQ;

/**
 * MyEclipse Struts Creation date: 03-12-2012
 * 
 * XDoclet definition:
 * 
 * @struts.action input="form/admin.jsp" validate="true"
 */
public class Admin extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	@Override
	public ActionForward doDefault(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		return null;

	}

	public ActionForward findByType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//接收url上的参数
		String id = request.getParameter("chooseType");
		String slist = request.getParameter("selectedlist");
		//JDBC
		DBBean dbBean = new DBBean();
		int count = 0;
		String Qdata = "";
		String Qdata1="";
		String sql="";
		String sql1="";
		String evlnum="";
		String str3,str2="无信息";
		ArrayList<HashMap<Object, Object>> qlist=null;
		//根据链接上传入的类型信息区分查找相应的数据返回显示
		//
		switch (Integer.parseInt(id)) {
		case 1:
			//
			//
			//
			//多门课程的返回详细信息列表
			//
			//
			//
			
			
			sql = "SELECT DISTINCT TID, TName, CID, ClassNum, CourseType, CNAME, XN, XQ, faculty, Number, num,Title,Major,Total " +
					/*", Class " +*/
					" FROM dbo.StatisticView " +
					""+slist+" ";
			//"";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {

				str2=item.get("TITLE")==null ? "无信息" : item.get("TITLE").toString();
				str3=item.get("FACULTY")==null ? "无信息" : item.get("FACULTY").toString();
				Qdata+="{" +
				"\"CID\":\""+item.get("CID").toString()+"\"," +
				"\"TNAME\":\""+item.get("TNAME").toString()+"\"," +
				"\"TID\":\""+item.get("TID").toString()+"\"," +
				"\"CNAME\":\""+item.get("CNAME").toString()+"\"," +
				"\"CourseType\":\""+item.get("COURSETYPE").toString()+"\"," +
				"\"Major\":\""+item.get("MAJOR").toString()+"\"," +
				"\"Title\":\""+str2+"\"," +
				"\"Total\":\""+item.get("TOTAL").toString()+"\"," +
				"\"XN\":\""+item.get("XN").toString()+"\"," +
				"\"ClassNum\":\""+item.get("CLASSNUM").toString()+"\"," +
				"\"FACULTY\":\""+str3+"\"," +
				"\"XQ\":\""+item.get("XQ").toString()+"\"," +
				"\"NUM\":\""+item.get("NUM").toString()+"\"," +				
				"\"EVLNUM\":\""+item.get("NUMBER").toString()+"\"" +
				"},";
				count++;
				
			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			request.setAttribute("List", Qdata);
			request.setAttribute("Type", 1);
			return mapping.findForward("showListTeacher");
			
			
			
		case 2:
			
			//
			//
			//
			//无课老师的列表
			//
			//
			//
		
			String Title = request.getParameter("Title");
			String Faculty=request.getParameter("Faculty");
			String[] rows= slist==null ? null : slist.split("~");
			str2="";
			//String str2= rows==null ? " " : "where XN="+rows[0]+" and XQ="+rows[1]+" ";
			if (rows==null) {
				str2="";
			}else if(rows.length==1){
				str2= " where XN=\'"+rows[0]+"\' ";
			}else if (rows.length>1) {
				str2= " where XN=\'"+rows[0]+"\' and XQ=\'"+rows[1]+"\' ";
			}		
			
			
			sql = "SELECT DISTINCT dbo.Teacher.TID, dbo.Teacher.TName, dbo.Teacher.Title, dbo.Teacher.faculty " +
					"FROM dbo.StatisticView1 RIGHT OUTER JOIN dbo.Teacher ON dbo.StatisticView1.TID = dbo.Teacher.TID " +
					"WHERE     dbo.Teacher.faculty IS NOT NULL AND XQ IS NULL " +
					"AND dbo.Teacher.Title IN ("+Title+")  AND dbo.Teacher.faculty IN ("+Faculty+") " +
					"and dbo.Teacher.TID NOT IN (SELECT DISTINCT dbo.StatisticView1.TID FROM dbo.StatisticView1 " +
					""+str2+" ) ";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				
				Qdata+="{" +
				"\"TID\":\""+item.get("TID").toString()+"\"," +
				"\"TNAME\":\""+item.get("TNAME").toString()+"\"," +
				"\"Title\":\""+item.get("TITLE").toString()+"\"," +
				"\"FACULTY\":\""+item.get("FACULTY").toString()+"\"" +
				"},";
				count++;
			
			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			
			
			request.setAttribute("List", Qdata);

			
			
			
			
			request.setAttribute("Type", 2);
			return mapping.findForward("ShowListNoClass");
			
			
		case 3:
			
			
			//
			//
			//
			//代课老师的教学任务明细
			//
			//
			//
			
			
			
			Title = request.getParameter("Title");
			Faculty=request.getParameter("Faculty");
			rows= slist==null ? null : slist.split("~");
			str2="";
			//String str2= rows==null ? " " : "where XN="+rows[0]+" and XQ="+rows[1]+" ";
			if (rows==null) {
				
				str2="";
				
			}else if(rows.length==1){
				
				str2= " AND XN=\'"+rows[0]+"\' ";
				
				sql = " SELECT COUNT(TID) AS countc,TID,TName,Title,faculty,XN,AVG(avg) AS score,AVG(Total) AS Total " +
				"FROM  dbo.StatisticView " +
				"WHERE Title IN ("+Title+") AND faculty IN ("+Faculty+")  "+str2+" " +
				"GROUP BY TName,TID,Title,faculty,XN ";
				
			}else if (rows.length>1) {
				
				str2= " AND XN=\'"+rows[0]+"\'  AND  XQ=\'"+rows[1]+"\' ";
				
				sql = " SELECT COUNT(TID),TName,TID,Title,faculty,XN,XQ,AVG(avg) AS score,AVG(Total) AS Total " +
					"FROM  dbo.StatisticView " +
					"WHERE Title IN ("+Title+") AND faculty IN ("+Faculty+")  "+str2+" " +
					"GROUP BY TName,TID,Title,faculty,XN,XQ ";
				
			}		
			
			

			
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				str3=item.get("SCORE").toString().length() > 6 ? item.get("SCORE").toString().substring(0,5) : item.get("SCORE").toString() ;
				Qdata+="{" +
				"\"countc\":\""+item.get("COUNTC").toString()+"\"," +
				"\"TID\":\""+item.get("TID").toString()+"\"," +
				"\"TNAME\":\""+item.get("TNAME").toString()+"\"," +
				"\"Title\":\""+item.get("TITLE").toString()+"\"," +
				"\"XN\":\""+item.get("XN").toString()+"\"," +
				//"\"XQ\":\""+item.get("XQ").toString()+"\"," +
				"\"Score\":\""+str3+"\"," +
				"\"Total\":\""+item.get("TOTAL").toString()+"\"," +
				"\"FACULTY\":\""+item.get("FACULTY").toString()+"\"" +
				"},";
				count++;
			
			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			
			
			request.setAttribute("List", Qdata);

			
			
			
			

			return mapping.findForward("teachingtask");
			
			
			
			
		case 4:
			//
			//
			//
			//返回课程类型表和院系类型表，联合显示
			//
			//
			//
			
			slist = request.getParameter("selectedlist");
			rows=slist.split(",");
			
							sql = "SELECT MarkID,Reason FROM dbo.StuEvaluation WHERE CID='"+rows[0]+"' AND ClassNum="+rows[2]+" AND XN='"+rows[3]+"'";
			
				
						
			

			
			
							
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:  [";
			for (HashMap<Object, Object> item : qlist) {
								
				Qdata+="{" +
				"\"Markid\":\""+item.get("MARKID").toString()+"\"," +
				"\"Reason\":\""+item.get("REASON").toString()+"\"" +
				"},";
				count++;
				
				}
			
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "]     ,Total:"+ count +"}";
		
			request.setAttribute("List", Qdata);

			
			
			
			

			return mapping.findForward("showClassReason");
			
			

		case 5:
			sql = "SELECT ID,Name,Level FROM dbo.Administrator";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				Qdata += "{" +
						"\"NAME\":\"" + item.get("NAME").toString()+"\","+
						"\"LEVEL\":\""+item.get("LEVEL").toString()+"\"," +
						"\"ID\":\""+item.get("ID").toString()+"\"" +
				"},";
				count++;
			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			request.setAttribute("List", Qdata);
			request.setAttribute("Type", 5);
			return mapping.findForward("showListSuccess");
		case 6:
			sql = "SELECT QID AS ID,Content,Category,Weight FROM dbo.StuQuestionnaire";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				Qdata += "{" +
				"\"ID\":\""+item.get("ID").toString()+"\"," +
				"\"CONTENT\":\"" + item.get("CONTENT").toString()+"\","+
				"\"CATEGORY\":\""+item.get("CATEGORY").toString()+"\"," +
				"\"WEIGHT\":\""+item.get("WEIGHT").toString()+"\"" +
				"},";
				count++;
			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			request.setAttribute("List", Qdata);
			request.setAttribute("Type", 6);
			return mapping.findForward("showListSuccess");
		default:
			break;
		}
		return null;
	}

	
	public ActionForward showStaticlist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//接收url上的参数
		String id = request.getParameter("chooseType");
		String slist = request.getParameter("selectedlist");
		String type = request.getParameter("type");
		String[] rows= slist==null ? null : slist.split("~");
		String str2="";
		//String str2= rows==null ? " " : "where XN="+rows[0]+" and XQ="+rows[1]+" ";
		if (rows==null) {
			str2="";
		}else if(rows.length==1){
			str2= " where XN=\'"+rows[0]+"\' ";
		}else if (rows.length>1) {
			str2= " where XN=\'"+rows[0]+"\' and XQ=\'"+rows[1]+"\' ";
		}
		
		//JDBC
		DBBean dbBean = new DBBean();
		int count = 0;
		String Qdata = "";
		String Qdata1="";
		String sql="";
		String sql1="";
		String evlnum="";
		ArrayList<HashMap<Object, Object>> qlist=null;
		//根据链接上传入的类型信息区分查找相应的数据返回显示
		//
		switch (Integer.parseInt(id)) {
		case 1:

		
			
			
			
			sql = "SELECT Major,XN,XQ," +
					"COUNT(XN) AS CountClass ," +
					"COUNT(CASE WHEN Total >= 85  THEN '优' END ) AS you ," +
					"COUNT(CASE WHEN Total >= 70 AND Total < 85 THEN '良' END ) AS liang ," +
					"COUNT(CASE WHEN Total >= 60 AND Total < 70 THEN '中' END ) AS zhong ," +
					"COUNT(CASE WHEN Total < 60 THEN '差' END ) AS cha FROM dbo.StatisticView AS ous "+str2+" GROUP BY XN,XQ,Major";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
					
				Qdata+="{" +
				"\"Major\":\""+item.get("MAJOR").toString()+"\"," +
				"\"XN\":\""+item.get("XN").toString()+"\"," +
				"\"XQ\":\""+item.get("XQ").toString()+"\"," +
				"\"you\":\""+item.get("YOU").toString()+"\"," +
				"\"CountClass\":\""+item.get("COUNTCLASS").toString()+"\"," +
				"\"liang\":\""+item.get("LIANG").toString()+"\"," +
				"\"zhong\":\""+item.get("ZHONG").toString()+"\"," +
				"\"cha\":\""+item.get("CHA").toString()+"\"" +
				"},";
				count++;

			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			request.setAttribute("List", Qdata);
			if (rows.length==1) {
				request.setAttribute("slist", "'"+rows[0]+"'");
			}else if (rows.length>1) {
				request.setAttribute("slist", "'"+rows[0]+"'");
				request.setAttribute("slist1", rows[1]);
			}
			return mapping.findForward("toStaticlist1");	
			
		case 2:

		
			
			
			
			sql = "SELECT DISTINCT Title,XN,XQ," +
					"COUNT(XN) AS CountClass ," +
					"COUNT(CASE WHEN Total >= 85  THEN '优' END ) AS you ," +
					"COUNT(CASE WHEN Total >= 70 AND Total < 85 THEN '良' END ) AS liang ," +
					"COUNT(CASE WHEN Total >= 60 AND Total < 70 THEN '中' END ) AS zhong ," +
					"COUNT(CASE WHEN Total < 60 THEN '差' END ) AS cha " +
					"FROM dbo.StatisticView AS ous " +
					""+str2+" and Title IS NOT NULL GROUP BY Title,XN,XQ";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
					
				Qdata+="{" +
				"\"Title\":\""+item.get("TITLE").toString()+"\"," +
				"\"XN\":\""+item.get("XN").toString()+"\"," +
				"\"XQ\":\""+item.get("XQ").toString()+"\"," +
				"\"you\":\""+item.get("YOU").toString()+"\"," +
				"\"CountClass\":\""+item.get("COUNTCLASS").toString()+"\"," +
				"\"liang\":\""+item.get("LIANG").toString()+"\"," +
				"\"zhong\":\""+item.get("ZHONG").toString()+"\"," +
				"\"cha\":\""+item.get("CHA").toString()+"\"" +
				"},";
				count++;

			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			request.setAttribute("List", Qdata);
			
			if (rows.length==1) {
				request.setAttribute("slist", "'"+rows[0]+"'");
			}else if (rows.length>1) {
				request.setAttribute("slist", "'"+rows[0]+"'");
				request.setAttribute("slist1", rows[1]);
			}
			return mapping.findForward("toStaticlist2");	
			
			
			
		case 3:

		
			
			
			
			sql = "SELECT CourseType,XN,XQ,COUNT(CourseType) AS CountClass ," +
					"COUNT(CASE WHEN Total >= 85  THEN '优' END ) AS you ," +
					"COUNT(CASE WHEN Total >= 70 AND Total < 85 THEN '良' END ) AS liang ," +
					"COUNT(CASE WHEN Total >= 60 AND Total < 70 THEN '中' END ) AS zhong ," +
					"COUNT(CASE WHEN Total < 60 THEN '差' END ) AS cha " +
					"FROM dbo.StatisticView "+str2+" GROUP BY XN,XQ,CourseType";
			
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
					
				Qdata+="{" +
				"\"CourseType\":\""+item.get("COURSETYPE").toString()+"\"," +
				"\"XN\":\""+item.get("XN").toString()+"\"," +
				"\"XQ\":\""+item.get("XQ").toString()+"\"," +
				"\"you\":\""+item.get("YOU").toString()+"\"," +
				"\"CountClass\":\""+item.get("COUNTCLASS").toString()+"\"," +
				"\"liang\":\""+item.get("LIANG").toString()+"\"," +
				"\"zhong\":\""+item.get("ZHONG").toString()+"\"," +
				"\"cha\":\""+item.get("CHA").toString()+"\"" +
				"},";
				count++;

			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			request.setAttribute("List", Qdata);
			if (rows.length==1) {
				request.setAttribute("slist", "'"+rows[0]+"'");
			}else if (rows.length>1) {
				request.setAttribute("slist", "'"+rows[0]+"'");
				request.setAttribute("slist1", rows[1]);
			}
			return mapping.findForward("toStaticlist3");	
			
		case 4:

			if (rows==null) {
				str2="";
			}else if(rows.length==1){
				
				str2= " AND  XN=\'"+rows[0]+"\' ";
				
				sql = "SELECT allTeacher,class,tmp1.Title,tmp1.faculty " +
				"FROM (" +
				"SELECT COUNT(Title) AS allTeacher,Title,faculty FROM dbo.Teacher WHERE Title IS NOT NULL AND faculty IS NOT NULL " +
				"GROUP BY dbo.Teacher.Title,dbo.Teacher.faculty) AS tmp1 " +
				"LEFT JOIN (" +
				"SELECT DISTINCT COUNT(Title) AS class,Title,faculty FROM dbo.StatisticView2 WHERE Title IS NOT NULL AND faculty IS NOT NULL "+str2+" " +
				"GROUP BY dbo.StatisticView2.Title,dbo.StatisticView2.faculty ) AS tmp2 " +
				"ON tmp1.faculty = tmp2.faculty AND tmp1.Title = tmp2.Title";
				
			}else if (rows.length>1) {
				
				str2= " AND  XN=\'"+rows[0]+"\' and XQ=\'"+rows[1]+"\' ";
				
				sql = "SELECT allTeacher,class,tmp1.Title,tmp1.faculty " +
				"FROM (" +
				"SELECT COUNT(Title) AS allTeacher,Title,faculty FROM dbo.Teacher WHERE Title IS NOT NULL AND faculty IS NOT NULL " +
				"GROUP BY dbo.Teacher.Title,dbo.Teacher.faculty) AS tmp1 " +
				"LEFT JOIN (" +
				"SELECT DISTINCT COUNT(Title) AS class,Title,faculty FROM dbo.StatisticView1 WHERE Title IS NOT NULL AND faculty IS NOT NULL "+str2+" " +
				"GROUP BY dbo.StatisticView1.Title,dbo.StatisticView1.faculty ) AS tmp2 " +
				"ON tmp1.faculty = tmp2.faculty AND tmp1.Title = tmp2.Title";
				
			}
			
			
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				str2=item.get("CLASS")==null ? "0" : item.get("CLASS").toString();
				Qdata+="{" +
				"\"AllTeacher\":\""+item.get("ALLTEACHER").toString()+"\"," +
				"\"CLASS\":\""+ str2 +"\"," +
				"\"Title\":\""+item.get("TITLE").toString()+"\"," +
				"\"Faculty\":\""+item.get("FACULTY").toString()+"\"" +
				"},";
				count++;

			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			request.setAttribute("List", Qdata);
			if (rows.length==1) {
				request.setAttribute("slist", "'"+rows[0]+"'");
			}else if (rows.length>1) {
				request.setAttribute("slist", "'"+rows[0]+"'");
				request.setAttribute("slist1", rows[1]);
			}
			return mapping.findForward("toStaticlist5");

		default:

		
			
			
			
			sql = "SELECT XN,XQ FROM dbo.ChooseClass GROUP BY XN,XQ";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {

				Qdata+="{" +
				"\"XN\":\""+item.get("XN").toString()+"\"," +

				"\"XQ\":\""+item.get("XQ").toString()+"\"" +
				"},";
				count++;

			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			request.setAttribute("List", Qdata);
			
			request.setAttribute("type", type);
			return mapping.findForward("toStaticlist4");		
			/*//内部ActionForward重定向，带参数
			ActionForward forward=mapping.findForward("toStaticlist4");   
			ActionForward newForward=new ActionForward(forward);
			String newPath=null;
				
			newPath=forward.getPath()+"?chooseType="+type+"";
			newForward.setPath(newPath);
			return newForward;*/
			
		}
		

	}
	
	
	
	
	
	
	public ActionForward showSelected(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		DBBean dbBean = new DBBean();
		
		
		
		String type = request.getParameter("type");
		String a = "";
		String sql = "";
		int count = 0;
		ArrayList<HashMap<Object, Object>> list = new ArrayList<HashMap<Object, Object>>();	
		
		
		
		
		
		
		
		
		
		String slist = request.getParameter("selectedlist");
		String[] rows=slist.split("-");
		String[] strings=null;
		
		for (String item : rows) {
			strings=item.split(",");

						sql = "SELECT DISTINCT CNAME,CID,XN,TID,ClassNum,TName, " +
								"CASE WHEN Number >= 1 THEN Category1 / Number ELSE 0 END AS Category1, " +
								"CASE WHEN Number >= 1 THEN Category2 / Number ELSE 0 END AS Category2, " +
								"CASE WHEN Number >= 1 THEN Category3 / Number ELSE 0 END AS Category3, " +
								"CASE WHEN Number >= 1 THEN Category4 / Number ELSE 0 END AS Category4, " +
								"CASE WHEN Number >= 1 THEN (Category1 + Category2 + Category3 + Category4) / 4 / Number ELSE 0 END AS Average,Number " +
								"FROM dbo.StatisticView WHERE CID='"+strings[0]+"' AND TID='"+strings[1]+"' AND ClassNum="+strings[2]+" AND XN="+strings[3]+"";
				
						list.addAll(dbBean.execute(sql));
			
					
		}

		
		
		String teString=list.toString();
		
		String Qdata = "{Rows:  [";
		for (HashMap<Object, Object> item : list) {
			if (item.get("CATEGORY1")!=null) {
							
			Qdata+="{" +
			"\"CID\":\""+item.get("CID").toString()+"\"," +
			"\"TNAME\":\""+item.get("TNAME").toString()+"\"," +
			"\"TID\":\""+item.get("TID").toString()+"\"," +
			"\"CNAME\":\""+item.get("CNAME").toString()+"\"," +
			"\"CNO\":\""+item.get("CLASSNUM").toString()+"\"," +
			"\"XN\":\""+item.get("XN").toString()+"\"," +
			"\"CATEGORY1\":\""+item.get("CATEGORY1").toString()+"\"," +
			"\"CATEGORY2\":\""+item.get("CATEGORY2").toString()+"\"," +
			"\"CATEGORY3\":\""+item.get("CATEGORY3").toString()+"\"," +
			"\"CATEGORY4\":\""+item.get("CATEGORY4").toString()+"\"," +
			"\"AVERAGE\":\""+item.get("AVERAGE").toString()+"\"," +
			"\"NUMBER\":\""+item.get("NUMBER").toString()+"\"" +
			"},";
			count++;
			}
			}
		
		Qdata=Qdata.substring(0, Qdata.length()-1);
		Qdata += "]     ,Total:"+ count +"}";
		if (count==0) {
			//request.setAttribute("error","没有已经有人评价的课程可以显示！");
			//return mapping.findForward("toFilterList");
			//内部ActionForward重定向，带参数
			ActionForward forward=mapping.findForward("backToShowList");   
			ActionForward newForward=new ActionForward(forward);
			String newPath=null;
						
			newPath=forward.getPath()+"?method=findByType&chooseType=3&errCode=1";
			newForward.setPath(newPath);
			return newForward;
		}


		//sql=list.toString();
		switch (Integer.parseInt(type)) {
		case 2:
			request.setAttribute("selected",Qdata);
			return mapping.findForward("showTable");
			

		default:
			Qdata=Qdata.substring(7, Qdata.length()-10);
			request.setAttribute("selected",Qdata);
			return mapping.findForward("showCharts");
		}
		
	}
	
	
	
	
	
	
	
	
	
	public ActionForward Authorization(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
		
		return null;		
	}
	
	
	
	
	
	/////////////////////////
	//管理员创建修改权限，增加修改问卷项目
	/////////////////////////
	public ActionForward adminEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String type=request.getParameter("type");
		String id=request.getParameter("Id");
		String edit=request.getParameter("edit");
		//
		Enumeration pNames=request.getParameterNames();
		DBBean dbBean=new DBBean();
		String name=null;
		String sql="";
		ActionForward forward=null;  
		ActionForward newForward=null;
		String newPath=null;
		switch (Integer.parseInt(type)) {
		case 1:			
			String Name=request.getParameter("txtName");
			String Password=request.getParameter("password");
			String Level=request.getParameter("ddlDepart");

			 sql="SELECT * FROM dbo.Administrator WHERE Name="+Name+"";
			if (edit.equals("1")) {
				String sql1="UPDATE dbo.Administrator SET Level=2,Password='"+Password+"' WHERE Name='"+Name+"'";
				boolean a=dbBean.isExistBySql(sql);
				
				forward=mapping.findForward("backToShowList");  
				newForward=new ActionForward(forward);
				newPath=forward.getPath()+"?method=findByType&chooseType=5";
				newForward.setPath(newPath);
				return newForward;
			}else if (dbBean.isExistBySql(sql)) {
				sql="INSERT dbo.Administrator( Name, Password, Level )VALUES  ( '"+Name+"','"+Password+"',"+Level+" )";

				dbBean.query(sql);
				forward=mapping.findForward("backToShowList");  
				newForward=new ActionForward(forward);
				newPath=forward.getPath()+"?method=findByType&chooseType=5";
				newForward.setPath(newPath);
				return newForward;
				
			}else {
				
				String error="1";
				
				request.setAttribute("error",error);
				
				return mapping.findForward("backToAdminEdite");
							
				
			}

		case 2:
			String content=null;
			String Category=null;
			String txtWeight=null;
			String describe=null;
			while(pNames.hasMoreElements()){
			    name=(String)pNames.nextElement();
			    if ("content".equals(name)) {
			    	content=request.getParameter(name);
				}else if("Category".equals(name)){
					Category=request.getParameter(name);
				}else if ("txtWeight".equals(name)) {
					txtWeight=request.getParameter(name);
				}else if ("describe".equals(name)) {
					describe=request.getParameter(name);
				}
			    }
			sql="INSERT dbo.Questionnaire( Content, Category, Weight )VALUES  ( '"+content+"', "+Category+", "+txtWeight+" )";
			dbBean.query(sql);
			forward=mapping.findForward("backToShowList");  
			newForward=new ActionForward(forward);
			newPath=forward.getPath()+"?method=findByType&chooseType=6";
			newForward.setPath(newPath);
			return newForward;			
		case 3:
			sql="DELETE FROM dbo.Administrator WHERE ID="+id+"";
			dbBean.query(sql);
			forward=mapping.findForward("backToShowList");  
			newForward=new ActionForward(forward);
			newPath=forward.getPath()+"?method=findByType&chooseType=5";
			newForward.setPath(newPath);
			return newForward;
		case 4:
			sql="DELETE FROM dbo.Questionnaire WHERE QID="+id+"";
			dbBean.query(sql);
			forward=mapping.findForward("backToShowList");  
			newForward=new ActionForward(forward);
			newPath=forward.getPath()+"?method=findByType&chooseType=6";
			newForward.setPath(newPath);
			return newForward;
		default:
			return mapping.findForward("showListSuccess");
		}
	}
	
}