/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ees.struts.action;

import com.ees.hibernate.ChooseClass;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ees.javabean.DBBean;
import com.ees.struts.action.BaseAction;
import com.sun.org.apache.bcel.internal.generic.IF_ACMPEQ;

/**
 * MyEclipse Struts Creation date: 03-12-2012
 * 
 * XDoclet definition:
 * 
 * @struts.action input="form/admin.jsp" validate="true"
 */
public class Admin extends BaseAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	@Override
	public ActionForward doDefault(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		return null;

	}

	public ActionForward findByType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//接收url上的参数
		String id = request.getParameter("chooseType");
		String slist = request.getParameter("selectedlist");
		//JDBC
		DBBean dbBean = new DBBean();
		int count = 0;
		String Qdata = "";
		String Qdata1="";
		String sql="";
		String sql1="";
		String evlnum="";
		String str3,str2="无信息";
		ArrayList<HashMap<Object, Object>> qlist=null;
		//根据链接上传入的类型信息区分查找相应的数据返回显示
		//
		switch (Integer.parseInt(id)) {
		case 1:
			//
			//
			//
			//返回教师列表和院系表，联合显示
			//
			//
			//
			
			
			sql = "SELECT DISTINCT TID, TName, CID, ClassNum, CourseType, CNAME, XN, XQ, faculty, Number, num,Title,Grade ,Major,Total " +
					/*", Class " +*/
					" FROM dbo.StatisticView " +
					""+slist+" ";
			//"";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {

				str2=item.get("TITLE")==null ? "无信息" : item.get("TITLE").toString();
				str3=item.get("FACULTY")==null ? "无信息" : item.get("FACULTY").toString();
				Qdata+="{" +
				"\"CID\":\""+item.get("CID").toString()+"\"," +
				"\"TNAME\":\""+item.get("TNAME").toString()+"\"," +
				"\"TID\":\""+item.get("TID").toString()+"\"," +
				"\"CNAME\":\""+item.get("CNAME").toString()+"\"," +
				/*"\"Class\":\""+item.get("CLASS").toString()+"\"," +*/
				"\"CourseType\":\""+item.get("COURSETYPE").toString()+"\"," +
				"\"Grade\":\""+item.get("GRADE").toString()+"\"," +
				"\"Major\":\""+item.get("MAJOR").toString()+"\"," +
				"\"Title\":\""+str2+"\"," +
				"\"Total\":\""+item.get("TOTAL").toString()+"\"," +
				"\"XN\":\""+item.get("XN").toString()+"\"," +
				"\"ClassNum\":\""+item.get("CLASSNUM").toString()+"\"," +
				"\"FACULTY\":\""+str3+"\"," +
				"\"XQ\":\""+item.get("XQ").toString()+"\"," +
				"\"NUM\":\""+item.get("NUM").toString()+"\"," +				
				"\"EVLNUM\":\""+item.get("NUMBER").toString()+"\"" +
				"},";
				count++;
				
			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			request.setAttribute("List", Qdata);
			request.setAttribute("Type", 1);
			return mapping.findForward("showListTeacher");
			
			
			
		case 2:
			
			//
			//
			//
			//返回课程类型表和课程表，联合显示
			//
			//
			//
			
			
			sql = "SELECT * FROM dbo.TeacherAll";
			sql1="SELECT * FROM dbo.CourseType WHERE ture='1'";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				if (item.get("FACULTY")!= null) {
					
					if (item.get("EVLNUM")==null) {
						evlnum="0";
					}else {
						evlnum=item.get("EVLNUM").toString();
					}
					
				Qdata+="{" +
				"\"CID\":\""+item.get("CID").toString()+"\"," +
				"\"TNAME\":\""+item.get("TNAME").toString()+"\"," +
				"\"TID\":\""+item.get("TID").toString()+"\"," +
				"\"CNAME\":\""+item.get("CNAME").toString()+"\"," +
				"\"COURSETYPE\":\""+item.get("COURSETYPE").toString()+"\"," +
				"\"XN\":\""+item.get("XN").toString()+"\"," +
				"\"CNO\":\""+item.get("CLASSNUM").toString()+"\"," +
				"\"FACULTY\":\""+item.get("FACULTY").toString()+"\"," +
				"\"XQ\":\""+item.get("XQ").toString()+"\"," +
				"\"NUM\":\""+item.get("NUM").toString()+"\"," +
				"\"EVLNUM\":\""+evlnum+"\"" +
				"},";
				count++;
				}
			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			
			count=0;
			qlist=dbBean.execute(sql1);
			Qdata1 = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				Qdata1+="{" +
				"\"COURSETYPE\":\""+item.get("COURSETYPE").toString()+"\"" +
				"},";
				count++;
			}
			Qdata1 += "],Total:" + count + "}";
			request.setAttribute("List", Qdata);
			request.setAttribute("List1", Qdata1);
			
			
			
			
			request.setAttribute("Type", 2);
			return mapping.findForward("showListCourse");
			
			
		case 3:
			
			
			
			
			
			
			sql = "SELECT  * FROM dbo.TeacherAll where Faculty is not null";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				if (item.get("FACULTY")!= null) {
					
					if (item.get("EVLNUM")==null) {
						evlnum="0";
					}else {
						evlnum=item.get("EVLNUM").toString();
					}
					
				Qdata+="{" +
				"\"CID\":\""+item.get("CID").toString()+"\"," +
				"\"TNAME\":\""+item.get("TNAME").toString()+"\"," +
				"\"TID\":\""+item.get("TID").toString()+"\"," +
				"\"CNAME\":\""+item.get("CNAME").toString()+"\"," +
				"\"COURSETYPE\":\""+item.get("COURSETYPE").toString()+"\"," +
				"\"XN\":\""+item.get("XN").toString()+"\"," +
				"\"CNO\":\""+item.get("CLASSNUM").toString()+"\"," +
				"\"FACULTY\":\""+item.get("FACULTY").toString()+"\"," +
				"\"XQ\":\""+item.get("XQ").toString()+"\"," +
				"\"NUM\":\""+item.get("NUM").toString()+"\"," +
				"\"EVLNUM\":\""+evlnum+"\"" +
				"},";
				count++;
				}
			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			request.setAttribute("errCode", request.getParameter("errCode"));
			request.setAttribute("List", Qdata);
			return mapping.findForward("toFilterList");
			
			
			
			
		case 4:
			//
			//
			//
			//返回课程类型表和院系类型表，联合显示
			//
			//
			//
			
			
			sql = "SELECT DISTINCT faculty FROM dbo.Teacher WHERE faculty IS NOT NULL AND faculty !='NULL'";
			sql1="SELECT * FROM dbo.CourseType WHERE ture='1'";
			String sql2="SELECT DISTINCT Major,Grade FROM dbo.Student ORDER BY Major";
			qlist=dbBean.execute(sql);
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				Qdata+="{" +
				"\"FACULTY\":\""+item.get("FACULTY").toString()+"\"" +
				"},";
				count++;
			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			
			count=0;
			qlist=dbBean.execute(sql1);
			Qdata1 = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				Qdata1+="{" +
				"\"COURSETYPE\":\""+item.get("COURSETYPE").toString()+"\"" +
				"},";
				count++;
			}
			Qdata1=Qdata1.substring(0, Qdata1.length()-1);
			Qdata1 += "],Total:" + count + "}";
			count=0;
			qlist=dbBean.execute(sql2);
			String Qdata2 = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				Qdata2+="{" +
				"\"MAJOR\":\""+item.get("MAJOR").toString()+"\"," +
				"\"GRADE\":\""+item.get("GRADE").toString()+"\"" +
				"},";
				count++;
			}
			Qdata2=Qdata2.substring(0, Qdata2.length()-1);
			Qdata2 += "],Total:" + count + "}";
			request.setAttribute("List", Qdata);
			request.setAttribute("List1", Qdata1);
			request.setAttribute("List2", Qdata2);
			
			
			
			request.setAttribute("Type", 0);
			return mapping.findForward("toTypeList");

		case 5:
			sql = "SELECT ID,Name,Level FROM dbo.Administrator";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				Qdata += "{" +
						"\"NAME\":\"" + item.get("NAME").toString()+"\","+
						"\"LEVEL\":\""+item.get("LEVEL").toString()+"\"," +
						"\"ID\":\""+item.get("ID").toString()+"\"" +
				"},";
				count++;
			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			request.setAttribute("List", Qdata);
			request.setAttribute("Type", 5);
			return mapping.findForward("showListSuccess");
		case 6:
			sql = "SELECT QID AS ID,Content,Category,Weight FROM dbo.StuQuestionnaire";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
				Qdata += "{" +
				"\"ID\":\""+item.get("ID").toString()+"\"," +
				"\"CONTENT\":\"" + item.get("CONTENT").toString()+"\","+
				"\"CATEGORY\":\""+item.get("CATEGORY").toString()+"\"," +
				"\"WEIGHT\":\""+item.get("WEIGHT").toString()+"\"" +
				"},";
				count++;
			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			request.setAttribute("List", Qdata);
			request.setAttribute("Type", 6);
			return mapping.findForward("showListSuccess");
		default:
			break;
		}
		return null;
	}

	
	public ActionForward showStaticlist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		//接收url上的参数
		String id = request.getParameter("chooseType");
		String slist = request.getParameter("selectedlist");
		//JDBC
		DBBean dbBean = new DBBean();
		int count = 0;
		String Qdata = "";
		String Qdata1="";
		String sql="";
		String sql1="";
		String evlnum="";
		ArrayList<HashMap<Object, Object>> qlist=null;
		//根据链接上传入的类型信息区分查找相应的数据返回显示
		//
		switch (Integer.parseInt(id)) {
		case 1:

		
			
			
			
			sql = "SELECT Major,Grade," +
					"COUNT(Grade) AS CountClass ," +
					"COUNT(CASE WHEN Total >= 85  THEN '优' END ) AS you ," +
					"COUNT(CASE WHEN Total >= 70 AND Total < 85 THEN '良' END ) AS liang ," +
					"COUNT(CASE WHEN Total >= 60 AND Total < 70 THEN '中' END ) AS zhong ," +
					"COUNT(CASE WHEN Total < 60 THEN '差' END ) AS cha FROM dbo.StatisticView AS ous GROUP BY Grade,Major";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
					
				Qdata+="{" +
				"\"Major\":\""+item.get("MAJOR").toString()+"\"," +
				"\"Grade\":\""+item.get("GRADE").toString()+"\"," +
				"\"you\":\""+item.get("YOU").toString()+"\"," +
				"\"CountClass\":\""+item.get("COUNTCLASS").toString()+"\"," +
				"\"liang\":\""+item.get("LIANG").toString()+"\"," +
				"\"zhong\":\""+item.get("ZHONG").toString()+"\"," +
				"\"cha\":\""+item.get("CHA").toString()+"\"" +
				"},";
				count++;

			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			request.setAttribute("List", Qdata);
			return mapping.findForward("toStaticlist1");
			
		case 2:

		
			
			
			
			sql = "SELECT DISTINCT Title,Grade," +
					"COUNT(Grade) AS CountClass ," +
					"COUNT(CASE WHEN Total >= 85  THEN '优' END ) AS you ," +
					"COUNT(CASE WHEN Total >= 70 AND Total < 85 THEN '良' END ) AS liang ," +
					"COUNT(CASE WHEN Total >= 60 AND Total < 70 THEN '中' END ) AS zhong ," +
					"COUNT(CASE WHEN Total < 60 THEN '差' END ) AS cha " +
					"FROM dbo.StatisticView AS ous " +
					"WHERE Title IS NOT NULL GROUP BY Title,Grade";
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
					
				Qdata+="{" +
				"\"Title\":\""+item.get("TITLE").toString()+"\"," +
				"\"Grade\":\""+item.get("GRADE").toString()+"\"," +
				"\"you\":\""+item.get("YOU").toString()+"\"," +
				"\"CountClass\":\""+item.get("COUNTCLASS").toString()+"\"," +
				"\"liang\":\""+item.get("LIANG").toString()+"\"," +
				"\"zhong\":\""+item.get("ZHONG").toString()+"\"," +
				"\"cha\":\""+item.get("CHA").toString()+"\"" +
				"},";
				count++;

			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			request.setAttribute("List", Qdata);
			return mapping.findForward("toStaticlist2");	
			
			
		case 3:

		
			
			
			
			sql = "SELECT CourseType,Grade,COUNT(CourseType) AS CountClass ," +
					"COUNT(CASE WHEN Total >= 85  THEN '优' END ) AS you ," +
					"COUNT(CASE WHEN Total >= 70 AND Total < 85 THEN '良' END ) AS liang ," +
					"COUNT(CASE WHEN Total >= 60 AND Total < 70 THEN '中' END ) AS zhong ," +
					"COUNT(CASE WHEN Total < 60 THEN '差' END ) AS cha " +
					"FROM dbo.StatisticView GROUP BY Grade,CourseType";
			
			qlist = dbBean.execute(sql);
			count = 0;
			Qdata = "{Rows:[";
			for (HashMap<Object, Object> item : qlist) {
					
				Qdata+="{" +
				"\"CourseType\":\""+item.get("COURSETYPE").toString()+"\"," +
				"\"Grade\":\""+item.get("GRADE").toString()+"\"," +
				"\"you\":\""+item.get("YOU").toString()+"\"," +
				"\"CountClass\":\""+item.get("COUNTCLASS").toString()+"\"," +
				"\"liang\":\""+item.get("LIANG").toString()+"\"," +
				"\"zhong\":\""+item.get("ZHONG").toString()+"\"," +
				"\"cha\":\""+item.get("CHA").toString()+"\"" +
				"},";
				count++;

			}
			Qdata=Qdata.substring(0, Qdata.length()-1);
			Qdata += "],Total:" + count + "}";
			
			request.setAttribute("List", Qdata);
			return mapping.findForward("toStaticlist3");		
			
			
			

		default:
			break;
		}
		return null;
	}
	
	public ActionForward showSelected(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		DBBean dbBean = new DBBean();
		
		
		
		String type = request.getParameter("type");
		String a = "";
		String sql = "";
		int count = 0;
		ArrayList<HashMap<Object, Object>> list = new ArrayList<HashMap<Object, Object>>();	
		
		
		
		
		
		
		
		
		
		String slist = request.getParameter("selectedlist");
		String[] rows=slist.split("-");
		String[] strings=null;
		
		for (String item : rows) {
			strings=item.split(",");

						sql = "SELECT DISTINCT CNAME,CID,Grade,TID,ClassNum,TName, " +
								"CASE WHEN Number >= 1 THEN Category1 / Number ELSE 0 END AS Category1, " +
								"CASE WHEN Number >= 1 THEN Category2 / Number ELSE 0 END AS Category2, " +
								"CASE WHEN Number >= 1 THEN Category3 / Number ELSE 0 END AS Category3, " +
								"CASE WHEN Number >= 1 THEN Category4 / Number ELSE 0 END AS Category4, " +
								"CASE WHEN Number >= 1 THEN (Category1 + Category2 + Category3 + Category4) / 4 / Number ELSE 0 END AS Average,Number " +
								"FROM dbo.StatisticView WHERE CID='"+strings[0]+"' AND TID='"+strings[1]+"' AND ClassNum="+strings[2]+" AND Grade="+strings[3]+"";
				
						list.addAll(dbBean.execute(sql));
			
					
		}

		
		
		String teString=list.toString();
		
		String Qdata = "{Rows:  [";
		for (HashMap<Object, Object> item : list) {
			if (item.get("CATEGORY1")!=null) {
							
			Qdata+="{" +
			"\"CID\":\""+item.get("CID").toString()+"\"," +
			"\"TNAME\":\""+item.get("TNAME").toString()+"\"," +
			"\"TID\":\""+item.get("TID").toString()+"\"," +
			"\"CNAME\":\""+item.get("CNAME").toString()+"\"," +
			"\"CNO\":\""+item.get("CLASSNUM").toString()+"\"," +
			"\"CATEGORY1\":\""+item.get("CATEGORY1").toString()+"\"," +
			"\"CATEGORY2\":\""+item.get("CATEGORY2").toString()+"\"," +
			"\"CATEGORY3\":\""+item.get("CATEGORY3").toString()+"\"," +
			"\"CATEGORY4\":\""+item.get("CATEGORY4").toString()+"\"," +
			"\"AVERAGE\":\""+item.get("AVERAGE").toString()+"\"," +
			"\"NUMBER\":\""+item.get("NUMBER").toString()+"\"" +
			"},";
			count++;
			}
			}
		
		Qdata=Qdata.substring(0, Qdata.length()-1);
		Qdata += "]     ,Total:"+ count +"}";
		if (count==0) {
			//request.setAttribute("error","没有已经有人评价的课程可以显示！");
			//return mapping.findForward("toFilterList");
			//内部ActionForward重定向，带参数
			ActionForward forward=mapping.findForward("backToShowList");   
			ActionForward newForward=new ActionForward(forward);
			String newPath=null;
						
			newPath=forward.getPath()+"?method=findByType&chooseType=3&errCode=1";
			newForward.setPath(newPath);
			return newForward;
		}


		//sql=list.toString();
		switch (Integer.parseInt(type)) {
		case 2:
			request.setAttribute("selected",Qdata);
			return mapping.findForward("showTable");
			

		default:
			Qdata=Qdata.substring(7, Qdata.length()-10);
			request.setAttribute("selected",Qdata);
			return mapping.findForward("showCharts");
		}
		
	}
	
	public ActionForward Authorization(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
		
		return null;		
	}
	
	
	
	
	
	/////////////////////////
	//管理员创建修改权限，增加修改问卷项目
	/////////////////////////
	public ActionForward adminEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String type=request.getParameter("type");
		String id=request.getParameter("Id");
		String edit=request.getParameter("edit");
		//
		Enumeration pNames=request.getParameterNames();
		DBBean dbBean=new DBBean();
		String name=null;
		String sql="";
		ActionForward forward=null;  
		ActionForward newForward=null;
		String newPath=null;
		switch (Integer.parseInt(type)) {
		case 1:			
			String Name=request.getParameter("txtName");
			String Password=request.getParameter("password");
			String Level=request.getParameter("ddlDepart");

			 sql="SELECT * FROM dbo.Administrator WHERE Name="+Name+"";
			if (edit.equals("1")) {
				String sql1="UPDATE dbo.Administrator SET Level=2,Password='"+Password+"' WHERE Name='"+Name+"'";
				boolean a=dbBean.isExistBySql(sql);
				
				forward=mapping.findForward("backToShowList");  
				newForward=new ActionForward(forward);
				newPath=forward.getPath()+"?method=findByType&chooseType=5";
				newForward.setPath(newPath);
				return newForward;
			}else if (dbBean.isExistBySql(sql)) {
				sql="INSERT dbo.Administrator( Name, Password, Level )VALUES  ( '"+Name+"','"+Password+"',"+Level+" )";

				dbBean.query(sql);
				forward=mapping.findForward("backToShowList");  
				newForward=new ActionForward(forward);
				newPath=forward.getPath()+"?method=findByType&chooseType=5";
				newForward.setPath(newPath);
				return newForward;
				
			}else {
				
				String error="1";
				
				request.setAttribute("error",error);
				
				return mapping.findForward("backToAdminEdite");
							
				
			}

		case 2:
			String content=null;
			String Category=null;
			String txtWeight=null;
			String describe=null;
			while(pNames.hasMoreElements()){
			    name=(String)pNames.nextElement();
			    if ("content".equals(name)) {
			    	content=request.getParameter(name);
				}else if("Category".equals(name)){
					Category=request.getParameter(name);
				}else if ("txtWeight".equals(name)) {
					txtWeight=request.getParameter(name);
				}else if ("describe".equals(name)) {
					describe=request.getParameter(name);
				}
			    }
			sql="INSERT dbo.Questionnaire( Content, Category, Weight )VALUES  ( '"+content+"', "+Category+", "+txtWeight+" )";
			dbBean.query(sql);
			forward=mapping.findForward("backToShowList");  
			newForward=new ActionForward(forward);
			newPath=forward.getPath()+"?method=findByType&chooseType=6";
			newForward.setPath(newPath);
			return newForward;			
		case 3:
			sql="DELETE FROM dbo.Administrator WHERE ID="+id+"";
			dbBean.query(sql);
			forward=mapping.findForward("backToShowList");  
			newForward=new ActionForward(forward);
			newPath=forward.getPath()+"?method=findByType&chooseType=5";
			newForward.setPath(newPath);
			return newForward;
		case 4:
			sql="DELETE FROM dbo.Questionnaire WHERE QID="+id+"";
			dbBean.query(sql);
			forward=mapping.findForward("backToShowList");  
			newForward=new ActionForward(forward);
			newPath=forward.getPath()+"?method=findByType&chooseType=6";
			newForward.setPath(newPath);
			return newForward;
		default:
			return mapping.findForward("showListSuccess");
		}
	}
	
}